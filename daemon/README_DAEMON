//////////////////////////////////////////////////////////////////////////
//																		//
// CPUSaver (C)2013, Cristian-Valeriu Soare 							//
// author: Cristian-Valeriu Soare 										//
// e-mail: soare_cristian16@yahoo.com 									//
// supervisor: Conf. Dr. Eng. Florin Pop								//
// Politehnica University of Bucharest, 								//
// Faculty of Automatic Control and Computer Science					//
//																		//
//////////////////////////////////////////////////////////////////////////

CPUSaver is a program that runs as a daemon and monitors the open windows
that are running on the system. It uses the Xorg API to this. 
Basic behaviour: windows and their processes are kept in a list. When
a window is created or gains focus it is brought at the top of the list. If a window
goes down the list and excseeds the allowed number of windows (threshold)
the program either suspends, kills or slows down the process, depending
on the configuration file set by the user. If such a window regains focus,
it is brought at the top of the list and is given normal priority. The other
windows are pushed one step down the list.

Installation:

make build - will build the project
make install - will create the necessary files for the program to run
make uninstall - will delete those files
make run - runs the program

Note: to make program run at startup, uncomment the last lines from
	install and uninstall rules in the makefile.

==========================================================================

How to use:

After the installation, the program will have copied its executable into
/usr/local/bin/cpusaver (so that it can be called from the terminal) and
its configuration file in ~/.cpusconfig which will hold the program behaviour
settings. If, when run, the program does not find this configuration file or
if it does not repsect the expected format, it will create or replace it
with a default configuration file.

The configuration file can be writtern manually or using the GUI program that
came in this package. You can find out how to use it by reading the README_GUI
located in the gui_control directory

--------------------------------------------------------------------------
Configuration file format

The configuration file can hold the following options:

Threshold n, where n is the maximum number of windows that are allowed to run
	withour any intervention. n must be greater than 3

EndType t, where t is one of the following: 'Suspend' 'Kill' or 'SlowDown',
	without quotes. This property defines the intervation method when 
	an unused window is no longer inside the limits of the threshold
	e.g.
	EndType Suspend

SpecialList n, where n is the number of processes which the user desires to
	define a special intervention for. The next n lines in the file must 
	be the following format: "process_name end_type" without quotes, where
	process_name is the name of the process that needs to be handled differently
	if it excseeds the threshold and end_type can be 'Suspend' - to suspend it,
	'Kill' to kill it, 'SlowDown' to slow it down or 'Immune' to leave it untouched
	e.g.
	SpecialList 2
	chromium Suspend
	nautilus Immune

PercentSD x, where x is the performance percentage with which the processes that have the SlowDown
	handling flag will be allowed to run at. x can be a number from 1 to 9 (10% - 90%)

ForbiddenList n, where n is the number of prcesses which are forbidden to interact with.
	This is the case of window compositors or managers (like compiz, kwin, plasma-desktop)
	which are mapped as normal windows, but must not be touched.
	The program has a hardcoded list wih compiz, kwin, plasma-desktop, xfwm, 
	and nautilus (on ubuntu it is running in background). However, you can override this list
	by writing ForbiddenList n (nr. of forbidden processes), followed by n forbidden processes
	e.g. 
	ForbiddenList 2
	plasma-desktop
	kwin

Intervention/handling types:

Suspend - suspends the process
Kill - kills the process
SlowDown - allows the program to run at PercentSD percentage of its full performance
Immune - the process will be allowed to run at its full performance event it is unused
	
==========================================================================

IMPORTANT NOTE:

The program is destined to be used on Linux systems using the X11/Xorg window server.
It has been testes on Arch Linux 32-bit using X11 and GNOME 3.10 desktop environment.
Wayland and Mir support will be added in future releases as the display servers will get more mature.

==========================================================================

Implementation and algorithm details:

The program uses a list (list.h) to keep track of the running applications.
LinkedList is an implementation of a circular double linked list. It is a template
class so it can be reused with any type. In each element, the list keeps a pointer
to the actual value. This way, adding and removing elements from the list is faster
as it does not need to copy every element of an object, but just a pointer to the instance.
At destruction, the list (as every class implemented in the project) has the responsability
to delete its elements. By using this implementation, memory can be easily freed,
each level deleting its child members. 
The list can also be specifically set to ignore this rule and leave its elements 
allocated even if it is being destructed.

The architecture of the classes is:
ProcessManager => LinkedList<process>, ProcessDelayer => each process => 
LinkedList<window>, ProcessDelayer

When a process is added to the list, if the number of processes excseeds the threshold, 
the oldest processes are turned off. This behaviour is controlled by the end_type property
of each process instance. So, it can be suspended, killed, immune or slowed down.
In the latter case, the process adds its pointer to the ProcessDelayer list which 
starts the slowing down routine. This routine is based on quickly suspending and continuing
the processes (just like a PWM) using a separate thread. Setting the percent each
process is allowed to run is like setting the width of the pulse in a PWM.
If the number of processes returns within the limits of the threshold, the list of the
ProcessDelayer will have zero elements, at which point it stops its parallel thread.
The list used by ProcessDelayer is the same as the ProcessManager's one. Their elements
point at the same processes, yet the ProcessDelayer list does not have the responsability
of freing the memory allocated for the processes. This task is handled by the ProcessManager list.

==========================================================================

Files description
cfgread.h/cpp - functions that deal with the configuration file
pdelayer.h/cpp - class that slows down processes from its list
pmanager.h/cpp - class that keeps track of opened applications and manages the old ones
process.h/cpp - class that keeps details and manages a single process. It provides functions
	of control over that specific process. Those functions are used by the manager (ProcessManager)
window.h/cpp - keeps a window id and its parent id
special.h/cpp - used to keep the details of a process with treatment as defined by the user.
types.h/cpp - types definitions used throughout the project

Implementation details and functions descriptions can be found in the source files comments.

==========================================================================

Results:
On a process occupying 100% of cpu time, using SlowDown with allowence of 10%, top/htop reports
a cpu usage of aproximately 15%. The cpu usage has been greatly reduced as expected.
If the user wants the old processes to be completely suspended instead of just slowed down, 
the results can be even better.
CPUSaver itself uses about 1 - 2 % of cpu even when running the delayer and has a few hundred bytes
to a few kilobytes of memory footprint, depending on the number of windows and processes it has to
keep track of.

==========================================================================

Conclusion:
CPUSaver can be used by anyone for better management of their open applications, reducing
the cpu usage and implicitly saving the battery.
